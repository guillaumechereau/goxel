/* A recursive-descent parser generated by peg 0.1.15 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 26

    // Do not edit the .inl file directly, instead edit procedural.leg.
    #include <assert.h>
    #include <stdio.h>
    #include <stdarg.h>
    #include <stdlib.h>
    #include "utlist.h"

    typedef struct {
        int  nb;
        char *names[16];
    } vars_t;

    #define YYSTYPE node_t*
    #define YY_CTX_LOCAL 1
    #define YY_CTX_MEMBERS \
        int line, read_line;    \
        node_t *prog;           \
        node_t *nodes;          \
        const char *cur;        \
        vars_t vars;

    // Redefine YY_INPUT to keep track of the last read line in the input.
    #define YY_INPUT(ctx, buf, result, max_size)        \
    {                                                   \
        int yyc = *ctx->cur;                            \
        if (yyc == '\n') ctx->read_line++;              \
        if (yyc) {ctx->cur++; *buf = yyc; result = 1;} \
        else result = 0;                                \
    }                                                   \

    static node_t *node_create(int type, const char *id, int line,
                               int nb, node_t **children, node_t **nodes)
    {
        int i;
        node_t *node = calloc(1, sizeof(*node));
        node->type = type;
        node->id = id ? strdup(id) : NULL;
        node->line = line;
        node->size = nb;
        for (i = 0; i < nb; i++) {
            assert(children[i]);
            DL_DELETE(*nodes, children[i]);
            DL_APPEND(node->children, children[i]);
        }
        DL_APPEND(*nodes, node);
        return node;
    }

    // Convenience macro to create a node.
    #define N(type, id, ...) ({ \
        node_t *nodes[] = {__VA_ARGS__}; \
        node_create(NODE_##type, id, yy->line, ARRAY_SIZE(nodes), nodes, \
                    &yy->nodes); \
    })

    // Convenience function to append a node to an other one.
    static void node_append(node_t *node, node_t *c, node_t **nodes)
    {
        assert(node);
        assert(c);
        assert(node != c);
        node->size++;
        DL_DELETE(*nodes, c);
        DL_APPEND(node->children, c);
    }
    #define A(n, c) ({node_append(n, c, &yy->nodes);})

    static void clear_vars(vars_t *vars)
    {
        int i;
        for (i = 0; i < ARRAY_SIZE(vars->names); i++) {
            free(vars->names[i]);
            vars->names[i] = NULL;
        }
        vars->nb = 0;
    }

    /*
    static int push_var(vars_t *vars, node_t *var) {
        int i;
        if (!var) {
            for (i = 0; i < ARRAY_SIZE(vars->names); i++) {
                free(vars->names[i]);
                vars->names[i] = NULL;
            }
            vars->nb = 0;
            return 0;
        }
        vars->names[vars->nb++] = strdup(var->id);
        return 0;
    }
    */

    static int get_var(vars_t *vars, const char *id) {
        int i;
        for (i = 0; i < vars->nb; i++) {
            if (strcmp(vars->names[i], id) == 0) {
                return i + 1;
            }
        }
        vars->names[vars->nb++] = strdup(id);
        return vars->nb;
    }

#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_EOL(yycontext *yy); /* 26 */
YY_RULE(int) yy_Comment(yycontext *yy); /* 25 */
YY_RULE(int) yy_Num(yycontext *yy); /* 24 */
YY_RULE(int) yy_OpMul(yycontext *yy); /* 23 */
YY_RULE(int) yy_OpSum(yycontext *yy); /* 22 */
YY_RULE(int) yy_Expr4(yycontext *yy); /* 21 */
YY_RULE(int) yy_OpCmp(yycontext *yy); /* 20 */
YY_RULE(int) yy_Expr3(yycontext *yy); /* 19 */
YY_RULE(int) yy_OpLog(yycontext *yy); /* 18 */
YY_RULE(int) yy_Expr2(yycontext *yy); /* 17 */
YY_RULE(int) yy_Op(yycontext *yy); /* 16 */
YY_RULE(int) yy_ArgsV(yycontext *yy); /* 15 */
YY_RULE(int) yy_IfStmt(yycontext *yy); /* 14 */
YY_RULE(int) yy_Transf(yycontext *yy); /* 13 */
YY_RULE(int) yy_Expr(yycontext *yy); /* 12 */
YY_RULE(int) yy_Stmt(yycontext *yy); /* 11 */
YY_RULE(int) yy_Value(yycontext *yy); /* 10 */
YY_RULE(int) yy_Var(yycontext *yy); /* 9 */
YY_RULE(int) yy_Rule(yycontext *yy); /* 8 */
YY_RULE(int) yy_Block(yycontext *yy); /* 7 */
YY_RULE(int) yy_Args(yycontext *yy); /* 6 */
YY_RULE(int) yy_Id(yycontext *yy); /* 5 */
YY_RULE(int) yy_EOF(yycontext *yy); /* 4 */
YY_RULE(int) yy_Shape(yycontext *yy); /* 3 */
YY_RULE(int) yy__(yycontext *yy); /* 2 */
YY_RULE(int) yy_Prog(yycontext *yy); /* 1 */

YY_ACTION(void) yy_1_EOL(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_EOL\n"));
  {
  yy->line++;
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Var(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Var\n"));
  {
  __ = N(ID, yytext); __->v = get_var(&yy->vars, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Id(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Id\n"));
  {
  __ = N(ID, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_Num(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Num\n"));
  {
  __ = N(VALUE, NULL); __->v = atof(yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_4_Value(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define e yy->__val[-2]
#define x yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_Value\n"));
  {
  __ = N(EXPR, i->id, e);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef e
#undef x
#undef n
}
YY_ACTION(void) yy_3_Value(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define e yy->__val[-2]
#define x yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Value\n"));
  {
  __ = e;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef e
#undef x
#undef n
}
YY_ACTION(void) yy_2_Value(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define e yy->__val[-2]
#define x yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Value\n"));
  {
  __ = N(EXPR, "var"); __->v = x->v;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef e
#undef x
#undef n
}
YY_ACTION(void) yy_1_Value(yycontext *yy, char *yytext, int yyleng)
{
#define i yy->__val[-1]
#define e yy->__val[-2]
#define x yy->__val[-3]
#define n yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Value\n"));
  {
  __ = n;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef i
#undef e
#undef x
#undef n
}
YY_ACTION(void) yy_1_OpMul(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OpMul\n"));
  {
  __ = N(ID, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OpSum(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OpSum\n"));
  {
  __ = N(ID, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OpCmp(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OpCmp\n"));
  {
  __ = N(ID, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_1_OpLog(yycontext *yy, char *yytext, int yyleng)
{
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_OpLog\n"));
  {
  __ = N(ID, yytext);
  }
#undef yythunkpos
#undef yypos
#undef yy
}
YY_ACTION(void) yy_2_Expr4(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define o yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Expr4\n"));
  {
  __ = a;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef o
#undef a
}
YY_ACTION(void) yy_1_Expr4(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define o yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Expr4\n"));
  {
  __ = N(EXPR, o->id,  a, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef o
#undef a
}
YY_ACTION(void) yy_2_Expr3(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define o yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Expr3\n"));
  {
  __ = a;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef o
#undef a
}
YY_ACTION(void) yy_1_Expr3(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define o yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Expr3\n"));
  {
  __ = N(EXPR, o->id, a, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef o
#undef a
}
YY_ACTION(void) yy_2_Expr2(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define o yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Expr2\n"));
  {
  __ = a;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef o
#undef a
}
YY_ACTION(void) yy_1_Expr2(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define o yy->__val[-2]
#define a yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Expr2\n"));
  {
  __ = N(EXPR, o->id, a, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef o
#undef a
}
YY_ACTION(void) yy_3_Expr(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Expr\n"));
  {
  __ = a;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_2_Expr(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Expr\n"));
  {
  __ = N(EXPR, o->id, a, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_1_Expr(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define c yy->__val[-2]
#define b yy->__val[-3]
#define a yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Expr\n"));
  {
  __ = N(EXPR, "?:", a, b, c);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef c
#undef b
#undef a
}
YY_ACTION(void) yy_3_Op(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define o yy->__val[-2]
#define i yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Op\n"));
  {
  __ = o;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef o
#undef i
}
YY_ACTION(void) yy_2_Op(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define o yy->__val[-2]
#define i yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Op\n"));
  {
  A(o, e);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef o
#undef i
}
YY_ACTION(void) yy_1_Op(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define o yy->__val[-2]
#define i yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Op\n"));
  {
  o = N(OP, i->id);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef o
#undef i
}
YY_ACTION(void) yy_3_Transf(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define t yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Transf\n"));
  {
  __ = t;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef t
}
YY_ACTION(void) yy_2_Transf(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define t yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Transf\n"));
  {
  A(t, o);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef t
}
YY_ACTION(void) yy_1_Transf(yycontext *yy, char *yytext, int yyleng)
{
#define o yy->__val[-1]
#define t yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Transf\n"));
  {
  t = N(TRANSF, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef o
#undef t
}
YY_ACTION(void) yy_3_ArgsV(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define a yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_ArgsV\n"));
  {
  __ = a;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef a
}
YY_ACTION(void) yy_2_ArgsV(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define a yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_ArgsV\n"));
  {
  A(a, e);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef a
}
YY_ACTION(void) yy_1_ArgsV(yycontext *yy, char *yytext, int yyleng)
{
#define e yy->__val[-1]
#define a yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_ArgsV\n"));
  {
  a = N(ARGS, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef e
#undef a
}
YY_ACTION(void) yy_1_IfStmt(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define e yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_IfStmt\n"));
  {
  __ = N(IF, NULL, e, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef e
}
YY_ACTION(void) yy_8_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_8_Stmt\n"));
  {
  __ = N(SET, NULL, e); __->v = x->v;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_7_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_7_Stmt\n"));
  {
  __ = t;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_6_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_6_Stmt\n"));
  {
  __ = N(CALL, i->id, t, a);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_5_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_5_Stmt\n"));
  {
  __ = i;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_4_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_Stmt\n"));
  {
  __ = N(RETURN, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_3_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Stmt\n"));
  {
  __ = N(TRANSFB, NULL, t, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_2_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Stmt\n"));
  {
  __ = N(LOOP, NULL, e, t, b); __->v = x ? x->v : 0;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_1_Stmt(yycontext *yy, char *yytext, int yyleng)
{
#define a yy->__val[-1]
#define i yy->__val[-2]
#define b yy->__val[-3]
#define t yy->__val[-4]
#define e yy->__val[-5]
#define x yy->__val[-6]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Stmt\n"));
  {
  x = NULL;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef a
#undef i
#undef b
#undef t
#undef e
#undef x
}
YY_ACTION(void) yy_3_Block(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define b yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Block\n"));
  {
  __ = b;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef b
}
YY_ACTION(void) yy_2_Block(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define b yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Block\n"));
  {
  A(b, s);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef b
}
YY_ACTION(void) yy_1_Block(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define b yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Block\n"));
  {
  b = N(BLOCK, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef b
}
YY_ACTION(void) yy_3_Rule(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define w yy->__val[-2]
#define r yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Rule\n"));
  {
  A(r, b); __ = r;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef w
#undef r
}
YY_ACTION(void) yy_2_Rule(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define w yy->__val[-2]
#define r yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Rule\n"));
  {
  r->v = w->v;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef w
#undef r
}
YY_ACTION(void) yy_1_Rule(yycontext *yy, char *yytext, int yyleng)
{
#define b yy->__val[-1]
#define w yy->__val[-2]
#define r yy->__val[-3]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Rule\n"));
  {
  r = N(RULE, NULL); r->v = 1.0;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef b
#undef w
#undef r
}
YY_ACTION(void) yy_1_Args(yycontext *yy, char *yytext, int yyleng)
{
#define v yy->__val[-1]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Args\n"));
  {
  clear_vars(&yy->vars);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef v
}
YY_ACTION(void) yy_4_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_4_Shape\n"));
  {
  __ = s;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_3_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Shape\n"));
  {
  A(s, r);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_2_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Shape\n"));
  {
  A(s, b);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_1_Shape(yycontext *yy, char *yytext, int yyleng)
{
#define r yy->__val[-1]
#define b yy->__val[-2]
#define i yy->__val[-3]
#define s yy->__val[-4]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Shape\n"));
  {
  s = N(SHAPE, i->id); clear_vars(&yy->vars);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef r
#undef b
#undef i
#undef s
}
YY_ACTION(void) yy_3_Prog(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define p yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_3_Prog\n"));
  {
  yy->prog = __ = p;
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef p
}
YY_ACTION(void) yy_2_Prog(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define p yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_2_Prog\n"));
  {
  A(p, s);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef p
}
YY_ACTION(void) yy_1_Prog(yycontext *yy, char *yytext, int yyleng)
{
#define s yy->__val[-1]
#define p yy->__val[-2]
#define __ yy->__
#define yypos yy->__pos
#define yythunkpos yy->__thunkpos
  yyprintf((stderr, "do yy_1_Prog\n"));
  {
  p = N(PROG, NULL);
  }
#undef yythunkpos
#undef yypos
#undef yy
#undef s
#undef p
}

YY_RULE(int) yy_EOL(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOL"));  if (!yymatchChar(yy, '\n')) goto l1;  yyDo(yy, yy_1_EOL, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Comment(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));
  {  int yypos3= yy->__pos, yythunkpos3= yy->__thunkpos;  if (!yymatchString(yy, "//")) goto l4;
  l5:;	
  {  int yypos6= yy->__pos, yythunkpos6= yy->__thunkpos;
  {  int yypos7= yy->__pos, yythunkpos7= yy->__thunkpos;  if (!yy_EOL(yy)) goto l7;  goto l6;
  l7:;	  yy->__pos= yypos7; yy->__thunkpos= yythunkpos7;
  }  if (!yymatchDot(yy)) goto l6;  goto l5;
  l6:;	  yy->__pos= yypos6; yy->__thunkpos= yythunkpos6;
  }  goto l3;
  l4:;	  yy->__pos= yypos3; yy->__thunkpos= yythunkpos3;  if (!yymatchString(yy, "/*")) goto l2;
  l8:;	
  {  int yypos9= yy->__pos, yythunkpos9= yy->__thunkpos;
  {  int yypos10= yy->__pos, yythunkpos10= yy->__thunkpos;
  {  int yypos12= yy->__pos, yythunkpos12= yy->__thunkpos;  if (!yy_EOL(yy)) goto l12;  goto l11;
  l12:;	  yy->__pos= yypos12; yy->__thunkpos= yythunkpos12;
  }
  {  int yypos13= yy->__pos, yythunkpos13= yy->__thunkpos;  if (!yymatchString(yy, "*/")) goto l13;  goto l11;
  l13:;	  yy->__pos= yypos13; yy->__thunkpos= yythunkpos13;
  }  if (!yymatchDot(yy)) goto l11;  goto l10;
  l11:;	  yy->__pos= yypos10; yy->__thunkpos= yythunkpos10;  if (!yy_EOL(yy)) goto l9;
  }
  l10:;	  goto l8;
  l9:;	  yy->__pos= yypos9; yy->__thunkpos= yythunkpos9;
  }  if (!yymatchString(yy, "*/")) goto l2;
  }
  l3:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 1;
  l2:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Num(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Num"));  if (!yy__(yy)) goto l14;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l14;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\140\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l14;
  l15:;	
  {  int yypos16= yy->__pos, yythunkpos16= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\140\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l16;  goto l15;
  l16:;	  yy->__pos= yypos16; yy->__thunkpos= yythunkpos16;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l14;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l14;  yyDo(yy, yy_1_Num, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Num", yy->__buf+yy->__pos));
  return 1;
  l14:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Num", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OpMul(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OpMul"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l17;
#undef yytext
#undef yyleng
  }
  {  int yypos18= yy->__pos, yythunkpos18= yy->__thunkpos;  if (!yymatchChar(yy, '*')) goto l19;  goto l18;
  l19:;	  yy->__pos= yypos18; yy->__thunkpos= yythunkpos18;  if (!yymatchChar(yy, '/')) goto l20;  goto l18;
  l20:;	  yy->__pos= yypos18; yy->__thunkpos= yythunkpos18;  if (!yymatchString(yy, "+-")) goto l17;
  }
  l18:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l17;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_OpMul, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OpMul", yy->__buf+yy->__pos));
  return 1;
  l17:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OpMul", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OpSum(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OpSum"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l21;
#undef yytext
#undef yyleng
  }
  {  int yypos22= yy->__pos, yythunkpos22= yy->__thunkpos;  if (!yymatchChar(yy, '+')) goto l23;  goto l22;
  l23:;	  yy->__pos= yypos22; yy->__thunkpos= yythunkpos22;  if (!yymatchChar(yy, '-')) goto l21;
  }
  l22:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l21;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_OpSum, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OpSum", yy->__buf+yy->__pos));
  return 1;
  l21:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OpSum", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expr4(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Expr4"));  if (!yy_Value(yy)) goto l24;  yyDo(yy, yySet, -3, 0);
  {  int yypos25= yy->__pos, yythunkpos25= yy->__thunkpos;  if (!yy_OpMul(yy)) goto l26;  yyDo(yy, yySet, -2, 0);  if (!yy_Expr4(yy)) goto l26;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_Expr4, yy->__begin, yy->__end);  goto l25;
  l26:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yy__(yy)) goto l24;  yyDo(yy, yy_2_Expr4, yy->__begin, yy->__end);
  }
  l25:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr4", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l24:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr4", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OpCmp(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OpCmp"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l27;
#undef yytext
#undef yyleng
  }
  {  int yypos28= yy->__pos, yythunkpos28= yy->__thunkpos;  if (!yymatchString(yy, "==")) goto l29;  goto l28;
  l29:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yymatchString(yy, "!=")) goto l30;  goto l28;
  l30:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yymatchString(yy, "<=")) goto l31;  goto l28;
  l31:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yymatchString(yy, ">=")) goto l32;  goto l28;
  l32:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yymatchChar(yy, '<')) goto l33;  goto l28;
  l33:;	  yy->__pos= yypos28; yy->__thunkpos= yythunkpos28;  if (!yymatchChar(yy, '>')) goto l27;
  }
  l28:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l27;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_OpCmp, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OpCmp", yy->__buf+yy->__pos));
  return 1;
  l27:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OpCmp", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expr3(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Expr3"));  if (!yy_Expr4(yy)) goto l34;  yyDo(yy, yySet, -3, 0);
  {  int yypos35= yy->__pos, yythunkpos35= yy->__thunkpos;  if (!yy_OpSum(yy)) goto l36;  yyDo(yy, yySet, -2, 0);  if (!yy_Expr3(yy)) goto l36;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_Expr3, yy->__begin, yy->__end);  goto l35;
  l36:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yy__(yy)) goto l34;  yyDo(yy, yy_2_Expr3, yy->__begin, yy->__end);
  }
  l35:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr3", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l34:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr3", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OpLog(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OpLog"));  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l37;
#undef yytext
#undef yyleng
  }
  {  int yypos38= yy->__pos, yythunkpos38= yy->__thunkpos;  if (!yymatchString(yy, "||")) goto l39;  goto l38;
  l39:;	  yy->__pos= yypos38; yy->__thunkpos= yythunkpos38;  if (!yymatchString(yy, "&&")) goto l37;
  }
  l38:;	  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l37;
#undef yytext
#undef yyleng
  }  yyDo(yy, yy_1_OpLog, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "OpLog", yy->__buf+yy->__pos));
  return 1;
  l37:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OpLog", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expr2(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Expr2"));  if (!yy_Expr3(yy)) goto l40;  yyDo(yy, yySet, -3, 0);
  {  int yypos41= yy->__pos, yythunkpos41= yy->__thunkpos;  if (!yy_OpCmp(yy)) goto l42;  yyDo(yy, yySet, -2, 0);  if (!yy_Expr2(yy)) goto l42;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_Expr2, yy->__begin, yy->__end);  goto l41;
  l42:;	  yy->__pos= yypos41; yy->__thunkpos= yythunkpos41;  if (!yy__(yy)) goto l40;  yyDo(yy, yy_2_Expr2, yy->__begin, yy->__end);
  }
  l41:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr2", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l40:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr2", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Op(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Op"));  if (!yy__(yy)) goto l43;  if (!yy_Id(yy)) goto l43;  yyDo(yy, yySet, -3, 0);  if (!yy__(yy)) goto l43;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Op, yy->__begin, yy->__end);
  l44:;	
  {  int yypos45= yy->__pos, yythunkpos45= yy->__thunkpos;  if (!yy_Expr(yy)) goto l45;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Op, yy->__begin, yy->__end);  goto l44;
  l45:;	  yy->__pos= yypos45; yy->__thunkpos= yythunkpos45;
  }  if (!yy__(yy)) goto l43;  yyDo(yy, yy_3_Op, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Op", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l43:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Op", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ArgsV(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "ArgsV"));  if (!yy__(yy)) goto l46;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_ArgsV, yy->__begin, yy->__end);
  {  int yypos47= yy->__pos, yythunkpos47= yy->__thunkpos;  if (!yymatchChar(yy, '(')) goto l47;
  l49:;	
  {  int yypos50= yy->__pos, yythunkpos50= yy->__thunkpos;  if (!yy_Expr(yy)) goto l50;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_ArgsV, yy->__begin, yy->__end);
  {  int yypos51= yy->__pos, yythunkpos51= yy->__thunkpos;  if (!yymatchChar(yy, ',')) goto l52;  goto l51;
  l52:;	  yy->__pos= yypos51; yy->__thunkpos= yythunkpos51;
  {  int yypos53= yy->__pos, yythunkpos53= yy->__thunkpos;  if (!yymatchChar(yy, ')')) goto l50;  yy->__pos= yypos53; yy->__thunkpos= yythunkpos53;
  }
  }
  l51:;	  goto l49;
  l50:;	  yy->__pos= yypos50; yy->__thunkpos= yythunkpos50;
  }  if (!yymatchChar(yy, ')')) goto l47;  goto l48;
  l47:;	  yy->__pos= yypos47; yy->__thunkpos= yythunkpos47;
  }
  l48:;	  yyDo(yy, yy_3_ArgsV, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "ArgsV", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l46:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ArgsV", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IfStmt(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "IfStmt"));  if (!yy__(yy)) goto l54;  if (!yymatchString(yy, "if")) goto l54;  if (!yy_Expr(yy)) goto l54;  yyDo(yy, yySet, -2, 0);  if (!yy_Block(yy)) goto l54;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_1_IfStmt, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "IfStmt", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l54:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IfStmt", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Transf(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Transf"));  if (!yy__(yy)) goto l55;  if (!yymatchChar(yy, '[')) goto l55;  if (!yy__(yy)) goto l55;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Transf, yy->__begin, yy->__end);
  l56:;	
  {  int yypos57= yy->__pos, yythunkpos57= yy->__thunkpos;  if (!yy_Op(yy)) goto l57;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Transf, yy->__begin, yy->__end);  goto l56;
  l57:;	  yy->__pos= yypos57; yy->__thunkpos= yythunkpos57;
  }  if (!yymatchChar(yy, ']')) goto l55;  yyDo(yy, yy_3_Transf, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Transf", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l55:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Transf", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Expr(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Expr"));  if (!yy_Expr2(yy)) goto l58;  yyDo(yy, yySet, -4, 0);
  {  int yypos59= yy->__pos, yythunkpos59= yy->__thunkpos;  if (!yymatchChar(yy, '?')) goto l60;  if (!yy_Expr2(yy)) goto l60;  yyDo(yy, yySet, -3, 0);  if (!yymatchChar(yy, ':')) goto l60;  if (!yy_Expr2(yy)) goto l60;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Expr, yy->__begin, yy->__end);  goto l59;
  l60:;	  yy->__pos= yypos59; yy->__thunkpos= yythunkpos59;  if (!yy_OpLog(yy)) goto l61;  yyDo(yy, yySet, -1, 0);  if (!yy_Expr(yy)) goto l61;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_2_Expr, yy->__begin, yy->__end);  goto l59;
  l61:;	  yy->__pos= yypos59; yy->__thunkpos= yythunkpos59;  if (!yy__(yy)) goto l58;  yyDo(yy, yy_3_Expr, yy->__begin, yy->__end);
  }
  l59:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 4, 0);
  return 1;
  l58:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Stmt(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 6, 0);
  yyprintf((stderr, "%s\n", "Stmt"));
  {  int yypos63= yy->__pos, yythunkpos63= yy->__thunkpos;  if (!yy__(yy)) goto l64;  if (!yymatchString(yy, "loop")) goto l64;  yyDo(yy, yy_1_Stmt, yy->__begin, yy->__end);
  {  int yypos65= yy->__pos, yythunkpos65= yy->__thunkpos;  if (!yy_Var(yy)) goto l65;  yyDo(yy, yySet, -6, 0);  if (!yy__(yy)) goto l65;  if (!yymatchChar(yy, '=')) goto l65;  goto l66;
  l65:;	  yy->__pos= yypos65; yy->__thunkpos= yythunkpos65;
  }
  l66:;	  if (!yy_Expr(yy)) goto l64;  yyDo(yy, yySet, -5, 0);  if (!yy_Transf(yy)) goto l64;  yyDo(yy, yySet, -4, 0);  if (!yy_Block(yy)) goto l64;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_2_Stmt, yy->__begin, yy->__end);  goto l63;
  l64:;	  yy->__pos= yypos63; yy->__thunkpos= yythunkpos63;  if (!yy__(yy)) goto l67;  if (!yymatchString(yy, "transform")) goto l67;  if (!yy_Transf(yy)) goto l67;  yyDo(yy, yySet, -4, 0);  if (!yy_Block(yy)) goto l67;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_3_Stmt, yy->__begin, yy->__end);  goto l63;
  l67:;	  yy->__pos= yypos63; yy->__thunkpos= yythunkpos63;  if (!yy__(yy)) goto l68;  if (!yymatchString(yy, "return")) goto l68;  yyDo(yy, yy_4_Stmt, yy->__begin, yy->__end);  goto l63;
  l68:;	  yy->__pos= yypos63; yy->__thunkpos= yythunkpos63;  if (!yy_IfStmt(yy)) goto l69;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_5_Stmt, yy->__begin, yy->__end);  goto l63;
  l69:;	  yy->__pos= yypos63; yy->__thunkpos= yythunkpos63;  if (!yy_Id(yy)) goto l70;  yyDo(yy, yySet, -2, 0);  if (!yy_ArgsV(yy)) goto l70;  yyDo(yy, yySet, -1, 0);  if (!yy_Transf(yy)) goto l70;  yyDo(yy, yySet, -4, 0);  yyDo(yy, yy_6_Stmt, yy->__begin, yy->__end);  goto l63;
  l70:;	  yy->__pos= yypos63; yy->__thunkpos= yythunkpos63;  if (!yy_Transf(yy)) goto l71;  yyDo(yy, yySet, -4, 0);  yyDo(yy, yy_7_Stmt, yy->__begin, yy->__end);  goto l63;
  l71:;	  yy->__pos= yypos63; yy->__thunkpos= yythunkpos63;  if (!yy_Var(yy)) goto l62;  yyDo(yy, yySet, -6, 0);  if (!yy__(yy)) goto l62;  if (!yymatchChar(yy, '=')) goto l62;  if (!yy_Expr(yy)) goto l62;  yyDo(yy, yySet, -5, 0);  yyDo(yy, yy_8_Stmt, yy->__begin, yy->__end);
  }
  l63:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Stmt", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 6, 0);
  return 1;
  l62:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Stmt", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Value(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Value"));
  {  int yypos73= yy->__pos, yythunkpos73= yy->__thunkpos;  if (!yy_Num(yy)) goto l74;  yyDo(yy, yySet, -4, 0);  yyDo(yy, yy_1_Value, yy->__begin, yy->__end);  goto l73;
  l74:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy_Var(yy)) goto l75;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_2_Value, yy->__begin, yy->__end);  goto l73;
  l75:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy__(yy)) goto l76;  if (!yymatchChar(yy, '(')) goto l76;  if (!yy_Expr(yy)) goto l76;  yyDo(yy, yySet, -2, 0);  if (!yymatchChar(yy, ')')) goto l76;  if (!yy__(yy)) goto l76;  yyDo(yy, yy_3_Value, yy->__begin, yy->__end);  goto l73;
  l76:;	  yy->__pos= yypos73; yy->__thunkpos= yythunkpos73;  if (!yy__(yy)) goto l72;  if (!yy_Id(yy)) goto l72;  yyDo(yy, yySet, -1, 0);  if (!yymatchChar(yy, '(')) goto l72;  if (!yy_Expr(yy)) goto l72;  yyDo(yy, yySet, -2, 0);  if (!yymatchChar(yy, ')')) goto l72;  yyDo(yy, yy_4_Value, yy->__begin, yy->__end);
  }
  l73:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Value", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 4, 0);
  return 1;
  l72:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Value", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Var(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Var"));  if (!yy__(yy)) goto l77;  if (!yymatchChar(yy, '$')) goto l77;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l77;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l77;
  l78:;	
  {  int yypos79= yy->__pos, yythunkpos79= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l79;  goto l78;
  l79:;	  yy->__pos= yypos79; yy->__thunkpos= yythunkpos79;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l77;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l77;  yyDo(yy, yy_1_Var, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Var", yy->__buf+yy->__pos));
  return 1;
  l77:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Var", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Rule(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Rule"));  if (!yy__(yy)) goto l80;  yyDo(yy, yySet, -3, 0);  if (!yymatchString(yy, "rule")) goto l80;  yyDo(yy, yy_1_Rule, yy->__begin, yy->__end);
  {  int yypos81= yy->__pos, yythunkpos81= yy->__thunkpos;  if (!yy_Value(yy)) goto l81;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_2_Rule, yy->__begin, yy->__end);  goto l82;
  l81:;	  yy->__pos= yypos81; yy->__thunkpos= yythunkpos81;
  }
  l82:;	  if (!yy_Block(yy)) goto l80;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_Rule, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Rule", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 3, 0);
  return 1;
  l80:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Rule", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Block(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Block"));  if (!yy__(yy)) goto l83;  if (!yymatchChar(yy, '{')) goto l83;  if (!yy__(yy)) goto l83;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Block, yy->__begin, yy->__end);
  l84:;	
  {  int yypos85= yy->__pos, yythunkpos85= yy->__thunkpos;  if (!yy_Stmt(yy)) goto l85;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Block, yy->__begin, yy->__end);  goto l84;
  l85:;	  yy->__pos= yypos85; yy->__thunkpos= yythunkpos85;
  }  if (!yy__(yy)) goto l83;  if (!yymatchChar(yy, '}')) goto l83;  yyDo(yy, yy_3_Block, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Block", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l83:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Block", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Args(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Args"));
  {  int yypos87= yy->__pos, yythunkpos87= yy->__thunkpos;  if (!yy__(yy)) goto l88;  yyDo(yy, yy_1_Args, yy->__begin, yy->__end);  if (!yymatchChar(yy, '(')) goto l88;
  l89:;	
  {  int yypos90= yy->__pos, yythunkpos90= yy->__thunkpos;  if (!yy_Var(yy)) goto l90;  yyDo(yy, yySet, -1, 0);
  {  int yypos91= yy->__pos, yythunkpos91= yy->__thunkpos;  if (!yymatchChar(yy, ',')) goto l92;  goto l91;
  l92:;	  yy->__pos= yypos91; yy->__thunkpos= yythunkpos91;
  {  int yypos93= yy->__pos, yythunkpos93= yy->__thunkpos;  if (!yymatchChar(yy, ')')) goto l90;  yy->__pos= yypos93; yy->__thunkpos= yythunkpos93;
  }
  }
  l91:;	  goto l89;
  l90:;	  yy->__pos= yypos90; yy->__thunkpos= yythunkpos90;
  }  if (!yymatchChar(yy, ')')) goto l88;  goto l87;
  l88:;	  yy->__pos= yypos87; yy->__thunkpos= yythunkpos87;  if (!yy__(yy)) goto l86;
  }
  l87:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Args", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 1, 0);
  return 1;
  l86:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Args", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Id(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Id"));  if (!yy__(yy)) goto l94;  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_BEGIN)) goto l94;
#undef yytext
#undef yyleng
  }  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l94;
  l95:;	
  {  int yypos96= yy->__pos, yythunkpos96= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l96;  goto l95;
  l96:;	  yy->__pos= yypos96; yy->__thunkpos= yythunkpos96;
  }  yyText(yy, yy->__begin, yy->__end);  {
#define yytext yy->__text
#define yyleng yy->__textlen
if (!(YY_END)) goto l94;
#undef yytext
#undef yyleng
  }  if (!yy__(yy)) goto l94;  yyDo(yy, yy_1_Id, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Id", yy->__buf+yy->__pos));
  return 1;
  l94:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Id", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_EOF(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "EOF"));
  {  int yypos98= yy->__pos, yythunkpos98= yy->__thunkpos;  if (!yymatchDot(yy)) goto l98;  goto l97;
  l98:;	  yy->__pos= yypos98; yy->__thunkpos= yythunkpos98;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EOF", yy->__buf+yy->__pos));
  return 1;
  l97:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOF", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Shape(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Shape"));  if (!yy__(yy)) goto l99;  yyDo(yy, yySet, -4, 0);  if (!yymatchString(yy, "shape")) goto l99;  if (!yy_Id(yy)) goto l99;  yyDo(yy, yySet, -3, 0);  yyDo(yy, yy_1_Shape, yy->__begin, yy->__end);  if (!yy_Args(yy)) goto l99;
  {  int yypos100= yy->__pos, yythunkpos100= yy->__thunkpos;  if (!yy_Block(yy)) goto l101;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_2_Shape, yy->__begin, yy->__end);  goto l100;
  l101:;	  yy->__pos= yypos100; yy->__thunkpos= yythunkpos100;  if (!yy_Rule(yy)) goto l99;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_Shape, yy->__begin, yy->__end);
  l102:;	
  {  int yypos103= yy->__pos, yythunkpos103= yy->__thunkpos;  if (!yy_Rule(yy)) goto l103;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_3_Shape, yy->__begin, yy->__end);  goto l102;
  l103:;	  yy->__pos= yypos103; yy->__thunkpos= yythunkpos103;
  }
  }
  l100:;	  yyDo(yy, yy_4_Shape, yy->__begin, yy->__end);
  yyprintf((stderr, "  ok   %s @ %s\n", "Shape", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 4, 0);
  return 1;
  l99:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Shape", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy__(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "_"));
  l105:;	
  {  int yypos106= yy->__pos, yythunkpos106= yy->__thunkpos;
  {  int yypos107= yy->__pos, yythunkpos107= yy->__thunkpos;  if (!yy_Comment(yy)) goto l108;  goto l107;
  l108:;	  yy->__pos= yypos107; yy->__thunkpos= yythunkpos107;  if (!yymatchClass(yy, (unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l109;  goto l107;
  l109:;	  yy->__pos= yypos107; yy->__thunkpos= yythunkpos107;  if (!yy_EOL(yy)) goto l106;
  }
  l107:;	  goto l105;
  l106:;	  yy->__pos= yypos106; yy->__thunkpos= yythunkpos106;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "_", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_Prog(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;  yyDo(yy, yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Prog"));  if (!yy__(yy)) goto l110;  yyDo(yy, yySet, -2, 0);  yyDo(yy, yy_1_Prog, yy->__begin, yy->__end);  if (!yy_Shape(yy)) goto l110;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Prog, yy->__begin, yy->__end);
  l111:;	
  {  int yypos112= yy->__pos, yythunkpos112= yy->__thunkpos;  if (!yy_Shape(yy)) goto l112;  yyDo(yy, yySet, -1, 0);  yyDo(yy, yy_2_Prog, yy->__begin, yy->__end);  goto l111;
  l112:;	  yy->__pos= yypos112; yy->__thunkpos= yythunkpos112;
  }  if (!yy__(yy)) goto l110;  yyDo(yy, yy_3_Prog, yy->__begin, yy->__end);  if (!yy_EOF(yy)) goto l110;
  yyprintf((stderr, "  ok   %s @ %s\n", "Prog", yy->__buf+yy->__pos));  yyDo(yy, yyPop, 2, 0);
  return 1;
  l110:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Prog", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_Prog);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif


static node_t *parse(const char *txt, int *err_line)
{
    yycontext yy;
    node_t *node, *tmp;
    memset(&yy, 0, sizeof(yy));
    yy.cur = txt;
    while (yyparse(&yy))
        ;
    if (!yy.prog && err_line) *err_line = yy.read_line;
    yyrelease(&yy);

    // Delete all the unused nodes.
    DL_FOREACH_SAFE(yy.nodes, node, tmp) {
        DL_DELETE(yy.nodes, node);
        if (node != yy.prog)
            node_free(node);
    }
    return yy.prog;
}


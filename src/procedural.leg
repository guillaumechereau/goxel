# Goxel 3D voxels editor
#
# copyright (c) 2016 Guillaume Chereau <guillaume@noctua-software.com>
#
# Goxel is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Goxel is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# goxel.  If not, see <http://www.gnu.org/licenses/>.
#

# This file contains the procedural rendering language parser generator code.
# If you change it you need to rebuild procedural.inl with 'leg':
# leg -o src/procedural.inl src/procedural.leg.
#
# I don't really like to use a code generator, but it makes it much easier
# to quickly change the grammar of the language.
#
# TODO: fix all the memory bugs in the code.

%{
    // Do not edit the .inl file directly, instead edit procedural.leg.
    #include <assert.h>
    #include <stdio.h>
    #include <stdarg.h>
    #include <stdlib.h>
    #include "utlist.h"

    typedef struct {
        int  nb;
        char *names[16];
    } vars_t;

    #define YYSTYPE node_t*
    #define YY_CTX_LOCAL 1
    #define YY_CTX_MEMBERS \
        int line, read_line;    \
        node_t *prog;           \
        node_t *nodes;          \
        const char *cur;        \
        vars_t vars;

    // Redefine YY_INPUT to keep track of the last read line in the input.
    #define YY_INPUT(ctx, buf, result, max_size)        \
    {                                                   \
        int yyc = *ctx->cur;                            \
        if (yyc == '\n') ctx->read_line++;              \
        if (yyc) {ctx->cur++; *buf = yyc; result = 1;} \
        else result = 0;                                \
    }                                                   \

    static node_t *node_create(int type, const char *id, int line,
                               int nb, node_t **children, node_t **nodes)
    {
        int i;
        node_t *node = calloc(1, sizeof(*node));
        node->type = type;
        node->id = id ? strdup(id) : NULL;
        node->line = line;
        node->size = nb;
        for (i = 0; i < nb; i++) {
            assert(children[i]);
            DL_DELETE(*nodes, children[i]);
            DL_APPEND(node->children, children[i]);
        }
        DL_APPEND(*nodes, node);
        return node;
    }

    // Convenience macro to create a node.
    #define N(type, id, ...) ({ \
        node_t *nodes[] = {__VA_ARGS__}; \
        node_create(NODE_##type, id, yy->line, ARRAY_SIZE(nodes), nodes, \
                    &yy->nodes); \
    })

    // Convenience function to append a node to an other one.
    static void node_append(node_t *node, node_t *c, node_t **nodes)
    {
        assert(node);
        assert(c);
        assert(node != c);
        node->size++;
        DL_DELETE(*nodes, c);
        DL_APPEND(node->children, c);
    }
    #define A(n, c) ({node_append(n, c, &yy->nodes);})

    static void clear_vars(vars_t *vars)
    {
        int i;
        for (i = 0; i < ARRAY_SIZE(vars->names); i++) {
            free(vars->names[i]);
            vars->names[i] = NULL;
        }
        vars->nb = 0;
    }

    /*
    static int push_var(vars_t *vars, node_t *var) {
        int i;
        if (!var) {
            for (i = 0; i < ARRAY_SIZE(vars->names); i++) {
                free(vars->names[i]);
                vars->names[i] = NULL;
            }
            vars->nb = 0;
            return 0;
        }
        vars->names[vars->nb++] = strdup(var->id);
        return 0;
    }
    */

    static int get_var(vars_t *vars, const char *id) {
        int i;
        for (i = 0; i < vars->nb; i++) {
            if (strcmp(vars->names[i], id) == 0) {
                return i + 1;
            }
        }
        vars->names[vars->nb++] = strdup(id);
        return vars->nb;
    }
%}

Prog    =  p:-       {p = N(PROG, NULL)}
           (s:Shape  {A(p, s)}                     )+
            -        {yy->prog = $$ = p}
            EOF

Shape   = s:- 'shape' i:Id       {s = N(SHAPE, i->id); clear_vars(&yy->vars)}
          Args
          (
              b:Block         {A(s, b)}
            | (r:Rule         {A(s, r)} )+
          )                   {$$ = s}

Args    = - {clear_vars(&yy->vars)} '('
                (v:Var (',' | &')') )*
          ')'
        | -

Rule    = r:- 'rule'    {r = N(RULE, NULL); r->v = 1.0}
          (w:Value      {r->v = w->v} ) ?
          b:Block       {A(r, b); $$ = r}

Block   = - '{' b:-      {b = N(BLOCK, NULL)}
          (s:Stmt        {A(b, s)}                   )*
          - '}'          {$$ = b}

Stmt    = - 'loop' {x = NULL} (x:Var - '=')? e:Expr t:Transf b:Block
                    {$$ = N(LOOP, NULL, e, t, b); $$->v = x ? x->v : 0}
        | - 'transform' t:Transf b:Block   {$$ = N(TRANSFB, NULL, t, b)}
        | - 'return'                       {$$ = N(RETURN, NULL)}
        | i:IfStmt                         {$$ = i}
        | i:Id a:ArgsV t:Transf            {$$ = N(CALL, i->id, t, a)}
        | t:Transf                         {$$ = t}
        | x:Var - '=' e:Expr          {$$ = N(SET, NULL, e); $$->v = x->v}

IfStmt  = - 'if' e:Expr b:Block      {$$ = N(IF, NULL, e, b)}

ArgsV   = a:- {a = N(ARGS, NULL)} (
            '(' (e:Expr {A(a, e)} (',' | &')'))* ')'
        )? {$$ = a}

Transf  = - '[' t:-  {t = N(TRANSF, NULL)}
          (o:Op    {A(t, o)}                )*
          ']'      {$$ = t}

Op      = - i:Id
          o:-           {o = N(OP, i->id)}
          (e:Expr       {A(o, e)}              )*
          -             {$$ = o}

Expr    = a:Expr2 (
              '?' b:Expr2 ':' c:Expr2 {$$ = N(EXPR, "?:", a, b, c)}
            | o:OpLog b:Expr          {$$ = N(EXPR, o->id, a, b)}
            | -                       {$$ = a}
        )

Expr2    = a:Expr3 (
              o:OpCmp b:Expr2      {$$ = N(EXPR, o->id, a, b)}
            | -                    {$$ = a}
        )

Expr3   = a:Expr4 (
              o:OpSum b:Expr3      {$$ = N(EXPR, o->id, a, b)}
            | -                    {$$ = a}
        )

Expr4   = a:Value (
              o:OpMul  b:Expr4    {$$ = N(EXPR, o->id,  a, b)}
            | -                   {$$ = a}
         )

OpLog   = < ('||' | '&&') >             {$$ = N(ID, yytext)}
OpCmp   = < ('==' | '!=' | '<=' | '>=' | '<' | '>') > {$$ = N(ID, yytext)}
OpSum   = < ('+' | '-') >               {$$ = N(ID, yytext)}
OpMul   = < ('*' | '/' | '+-') >        {$$ = N(ID, yytext)}


Value   = n:Num {$$ = n}
        | x:Var {$$ = N(EXPR, "var"); $$->v = x->v}
        | - '(' e:Expr ')' - {$$ = e}
        | - i:Id '(' e:Expr ')' {$$ = N(EXPR, i->id, e)}

Num     = - < [-.0-9]+ > -  {$$ = N(VALUE, NULL); $$->v = atof(yytext)}

Id      = - < [a-zA-Z_][a-zA-Z_0-9]* > -  {$$ = N(ID, yytext)}

Var     = - '$' < [a-zA-Z_][a-zA-Z_0-9]* > -
                {$$ = N(ID, yytext); $$->v = get_var(&yy->vars, yytext)}

-       = ( Comment | [ \t] | EOL )*

Comment = '//' (!EOL .)*
        | '/*' ((!EOL !'*/' .) | EOL)* '*/'

EOL     = '\n' {yy->line++}

EOF     = !.

%%

static node_t *parse(const char *txt, int *err_line)
{
    yycontext yy;
    node_t *node, *tmp;
    memset(&yy, 0, sizeof(yy));
    yy.cur = txt;
    while (yyparse(&yy))
        ;
    if (!yy.prog && err_line) *err_line = yy.read_line;
    yyrelease(&yy);

    // Delete all the unused nodes.
    DL_FOREACH_SAFE(yy.nodes, node, tmp) {
        DL_DELETE(yy.nodes, node);
        if (node != yy.prog)
            node_free(node);
    }
    return yy.prog;
}
